---
title: "Practice: Vectors (part 2)"
subtitle: "Stat 133"
author: "Gaston Sanchez"
format: 
  html:
    toc: true
    number-sections: true
    theme: simplex
embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
```


::: {.callout-note}
## Learning Objectives

- Work with vectors of different data types
- Create vectors of numeric sequences
- Understand the concept of _atomic_ vectors
- Learn how to subset and slice R vectors
:::


# Vectors from data `"starwars"`

In this module, you are going to work with the data `starwars` from `"dplyr"`
which is part of the `"tidyverse"` ecosystem of packages. 

```{r warning=FALSE, message=FALSE}
library(tidyverse)
data(starwars)
```

To be more specific, we will focus on columns `name`, `height`, `mass`, `sex`, 
and `homeworld`, and we will also remove rows that contain missing values:

```{r}
variables = c("name", "height", "mass", "sex", "homeworld")
dat = na.omit(starwars[ ,variables])
```


## Columns into vectors

Because we are interested in working with the above five columns from a
vectors perspective, we need to "break apart" the table `dat` into five vectors:

```{r}
# creating 5 vectors (from columns in dat)
name = dat$name

height = dat$height

mass = dat$mass

sex = dat$sex

homeworld = dat$homeworld
```

Use the function `typeof()` to see the data type of each of the above vectors.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE
typeof(name)
typeof(height)
typeof(mass)
typeof(sex)
typeof(homeworld)
```


## Your turn: subsetting vectors

The code below is one way to create a vector `four` by selecting the first four
elements in `name`:

```{r}
four = head(name, n = 4)
```

Single brackets `[ ]` are used to subset (i.e. subscript, split, slice) vectors.
Without running the code, try to guess the output of the following commands, and 
then run them to check your guess:

a) number one: `four[1]`

b) an index of zero: `four[0]`?

c) a negative index: `four[-1]`?

d) various negative indices: `four[-c(1,2,3)]`?

e) an index greater than the length of the vector: `four[5]`?

f) repeated indices: `four[c(1,2,2,3,3,3)]`?

Often, you will need to generate vectors of numeric sequences, like the first 
five elements `1:5`, or from the first till the last element `1:length(name)`. 
R provides the colon operator `:`, and the functions `seq()`, and `rep()` 
to create various types of sequences.


## Your turn: sequences and repetitions

Figure out how to use `seq()`, `rep()`, `rev()`, and bracket notation, to extract:

a) all the even elements in `name` (i.e. extract positions 2, 4, 6, etc)

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# all the even elements in name
name[seq(from = 2, to = length(name), by = 2)]
```


b) all the odd elements in `height` (i.e. extract positions 1, 3, 5, etc)

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# all the odd elements in height
height[seq(from = 1, to = length(height), by = 2)]
```


c) all multiples of 5 (e.g. 5, 10, 15, etc) of `sex`

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# all multiples of 5 (e.g. 5, 10, 15, etc) of sex
sex[seq(from = 5, to = length(sex), by = 5)]
```


d) elements in positions 10, 20, 30, 40, etc of `mass`

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# elements in positions 10, 20, 30, 40, etc of mass
mass[seq(from = 10, to = length(mass), by = 10)]
```


e) all the even elements in `name` but this time in reverse order

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# all the even elements in name but this time in reverse order
rev(name[seq(from = 2, to = length(name), by = 2)])
```


-----


# Logical Subsetting and Comparisons

Another kind of subsetting/subscripting style is the so-called __logical subsetting__. This kind of subsetting typically takes place when making comparisons. 
A __comparison operation__ occurs when you use comparison operators such as: 

- `>` greater than
- `>=` greater than or equal
- `<` less than
- `<=` less than or equal
- `==` equal
- `!=` different

For example:

```r
height_four <- height[1:4]

# elements greater than 100
height_four[height_four > 100]

# elements less than 100
height_four[height_four < 100]

# elements less than or equal to 10
height_four[height_four <= 10]

# elements different from 10
height_four[height_four != 10]
```

In addition to using comparison operators, you can also use __logical operators__ 
to produce a logical vector. The most common type of logical operators are:

- `&` AND
- `|` OR
- `!` negation

Run the following commands to see what R does:

```r
# AND
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE

# OR
TRUE | TRUE
TRUE | FALSE
FALSE | FALSE

# NOT
!TRUE
!FALSE
```

Logical operators allow you to combine several comparisons:

```r
# vectors for first 10 elements
name10 <- name[1:10]
height10 <- height[1:10]
mass10 <- mass[1:10]
sex10 <- sex[1:10]

# names of first 10 individuals with mass greater than 70kg
name10[mass10 > 70]

# names of first 10 individuals with heights between 150 and 200 (exclusive)
name10[height10 > 150 & height10 < 200]
```


## Your turn: logical subsetting

Write commands, using bracket notation, to answer the following questions 
(you may need to use `is.na()`, `min()`, `max()`, `which()`, `which.min()`, `which.max()`):

a) name of individuals from homeworld Naboo

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# name of individuals from homeworld Naboo
name[homeworld == "Naboo"]
```


b) name of individuals from homeworlds Naboo or Corellia; 
_hint:_ the _OR_ operator `|` is your friend.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# name of individuals from Naboo or Corellia
name[homeworld == "Naboo" | homeworld == "Corellia"]
```


c) name of female individuals

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# name of female individuals
name[sex == "female"]
```


d) number (i.e. count) of male individuals; 
_hint:_ the `sum()` function is your friend.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# number of male individuals
sum(sex == "male")
```


e) name of individuals with largest mass;
_hint:_ the `which.max()` function is your friend.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# name of individuals with largest mass
name[which.max(mass)]
```


f) largest height of all females;
_hint:_ the `max()` function is your friend.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# largest height of all females
max(height[sex == "female"])
```


g) name of individual(s) with height equal to the median height;
_hint:_ the `median()` function is your friend.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# name of individual(s) with height equal to the median height
name[height == median(height)]
```


h) name of individual(s) with height of at most 180, _AND_ mass of at least 120;
_hint:_ the logical AND operator `&` is your friend. 

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: FALSE

# name of individual(s) with height of at most 180, and mass of at least 120 
name[height <= 180 & mass >= 120]
```
